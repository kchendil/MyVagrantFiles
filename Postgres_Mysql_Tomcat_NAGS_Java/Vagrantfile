# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("1") do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "base-SuSE-11.4"

  # Configure VirtualBox VM Ram usage
  config.vm.customize ["modifyvm", :id, "--memory", "2048"]

     config.vm.forward_port 8080, 8080
   config.vm.forward_port 3306, 3306
   
   
  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "http://bullseye.qalab.cam.novell.com/NFS/ftp/vagrant-boxes/base-SuSE-11.4.box"

  # Boot with a GUI so you can see the screen. (Default is headless)
  # config.vm.boot_mode = :gui
  config.ssh.forward_x11 = true
  config.ssh.forward_agent = true

  # Assign this VM to a host-only network IP, allowing you to access it
  # via the IP. Host-only networks can talk to the host machine as well as
  # any other machines on the same network, but cannot be accessed (through this
  # network interface) by any external networks.
  # config.vm.network :hostonly, "33.33.33.10"

  # Assign this VM to a bridged network, allowing you to connect directly to a
  # network using the host's network device. This makes the VM appear as another
  # physical device on your network.
  # config.vm.network :bridged

  # Forward a port from the guest to the host, which allows for outside
  # computers to access the VM, whereas host only networking does not.
  #config.vm.forward_port 8080, 38080

  # Share an additional folder to the guest VM. The first argument is
  # an identifier, the second is the path on the guest to mount the
  # folder, and the third is the path on the host to the actual folder.
  # config.vm.share_folder "v-data", "/vagrant_data", "../data"
  #config.vm.share_folder "iac-sandbox", "/home/vagrant/work/iac", "~/work/github/iac"

  # Enable provisioning with chef solo, specifying a cookbooks path (relative
  # to this Vagrantfile), and adding some recipes and/or roles.
  #
  # config.vm.provision :chef_solo do |chef|
  #   chef.cookbooks_path = "cookbooks"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { :mysql_password => "foo" }
  # end
  config.vm.provision :shell do |s|
    s.inline = "sudo gem update chef"
  end
  config.vm.provision :chef_solo do |chef|
    # cookbooks_path not necessary if the berkshelf plugin is installed.
     chef.cookbooks_path = "vendor/cookbooks"
    chef.add_recipe "postgresql::server"
	chef.add_recipe "mysql::server"
	chef.add_recipe "tomcat"
	chef.add_recipe "nags"
  
    # You may also specify custom JSON attributes:
    chef.json = {
      :postgresql => { :password => { :postgres => "postgres" } },
      :java => { :oracle => { "accept_oracle_download_terms" => true }, :install_flavor => "oracle", :jdk_version => '7', :java_home => '/home/vagrant/work/jdk', :arch => 'x86_64' },     
	  :tomcat => { :tomcat_version=>'7' },
	  :mysql => { :server_root_password=> "novell",:server_repl_password=> "novell",:server_debian_password=>"novell" }
      
    }
  end
end
